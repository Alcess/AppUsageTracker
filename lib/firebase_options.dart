// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'demo-key',
    appId: '1:demo:web:demo',
    messagingSenderId: 'demo',
    projectId: 'demo-project',
    authDomain: 'demo-project.firebaseapp.com',
    storageBucket: 'demo-project.appspot.com',
  );

  static FirebaseOptions get android {
    final apiKey = dotenv.env['FIREBASE_API_KEY'];
    final projectId = dotenv.env['FIREBASE_PROJECT_ID'];
    final appId = dotenv.env['FIREBASE_APP_ID'];
    final messagingSenderId = dotenv.env['FIREBASE_MESSAGING_SENDER_ID'];
    final storageBucket = dotenv.env['FIREBASE_STORAGE_BUCKET'];

    if (apiKey == null || apiKey.isEmpty) {
      throw Exception(
        'FIREBASE_API_KEY not found in environment variables. '
        'Please ensure your .env file is properly configured.',
      );
    }

    if (projectId == null || projectId.isEmpty) {
      throw Exception(
        'FIREBASE_PROJECT_ID not found in environment variables. '
        'Please ensure your .env file is properly configured.',
      );
    }

    if (appId == null || appId.isEmpty) {
      throw Exception(
        'FIREBASE_APP_ID not found in environment variables. '
        'Please ensure your .env file is properly configured.',
      );
    }

    if (messagingSenderId == null || messagingSenderId.isEmpty) {
      throw Exception(
        'FIREBASE_MESSAGING_SENDER_ID not found in environment variables. '
        'Please ensure your .env file is properly configured.',
      );
    }

    if (storageBucket == null || storageBucket.isEmpty) {
      throw Exception(
        'FIREBASE_STORAGE_BUCKET not found in environment variables. '
        'Please ensure your .env file is properly configured.',
      );
    }

    return FirebaseOptions(
      apiKey: apiKey,
      appId: appId,
      messagingSenderId: messagingSenderId,
      projectId: projectId,
      storageBucket: storageBucket,
    );
  }

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'demo-key',
    appId: '1:demo:ios:demo',
    messagingSenderId: 'demo',
    projectId: 'demo-project',
    storageBucket: 'demo-project.appspot.com',
    iosBundleId: 'com.example.appUsageTracker',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'demo-key',
    appId: '1:demo:macos:demo',
    messagingSenderId: 'demo',
    projectId: 'demo-project',
    storageBucket: 'demo-project.appspot.com',
    iosBundleId: 'com.example.appUsageTracker',
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: 'demo-key',
    appId: '1:demo:windows:demo',
    messagingSenderId: 'demo',
    projectId: 'demo-project',
    storageBucket: 'demo-project.appspot.com',
  );
}
